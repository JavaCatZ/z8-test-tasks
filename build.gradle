buildscript {
	dependencies {
		classpath 'gradle.plugin.com.dorongold.plugins:task-tree:1.5'
	}
}

apply plugin: 'com.dorongold.task-tree'

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url 'http://mvn.revoltsoft.ru/' }
		maven { url 'https://plugins.gradle.org/m2/' }
	}
	dependencies {
		classpath 'com.eriwen:gradle-css-plugin:2.14.0'
		classpath 'com.eriwen:gradle-js-plugin:2.14.1'
		classpath 'org.zenframework.z8:z8-gradle-plugin:1.3.0'
	}
}

repositories {
	mavenLocal()
	maven { url 'http://mvn.revoltsoft.ru/' }
}

group = 'org.zenframework.z8'
version = '1.0'

buildDir = "${projectDir}/target"

ext.z8Version = '1.3.0'

apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'z8-bl'
apply plugin: 'js'
apply plugin: 'css'
//apply plugin: 'war'
//apply plugin: 'maven'
//apply plugin: 'maven-publish'

configurations {
	/* Z8 Boot classpath dependency */
	boot
	/* Z8 JavaScript dependency */
	revolt {
		transitive = false
		canBeResolved = true
		canBeConsumed = false
	}
	/* WEB-INF resource */
	resources {
		transitive = false
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	runtime "org.zenframework.z8.dependencies.jdbc:postgresql-42.0.0:3.0"

	boot "org.zenframework.z8:org.zenframework.z8.boot:${z8Version}"

	revolt "org.zenframework.z8:org.zenframework.z8.js:${z8Version}@zip"
	resources "org.zenframework.z8:org.zenframework.z8.resources:${z8Version}@zip"
}

// Bl & Java config

/* Set Java version and sources encoding */
tasks.withType(JavaCompile) {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	options.encoding = 'UTF-8'
}

// Web config

/* Concat CSS-files, CSS-sources order is specified in src/main/css/.buildorder */
task concatCss {
	if (project.hasProperty('z8Home'))
		dependsOn gradle.includedBuild(file(z8Home).name).task(':org.zenframework.z8.js:assembleZip')
	doLast {
		def source = zipTree(configurations.revolt.singleFile).matching {
			include "web/debug/css/revolt.css"
		}.plus(file("${projectDir}/src/main/css/.buildorder").readLines().findAll { !it.trim().isEmpty() }
				.collect { file("${projectDir}/src/main/css/${it.trim()}") })
		def dest = file("${buildDir}/web/debug/css/${rootProject.name}.css")
		dest.parentFile.mkdirs()
		dest.newWriter('UTF-8').withWriter { w ->
			source.each { f -> w << f.getText('UTF-8') << '\n' }
		}
	}
}

/* Minify CSS file */
minifyCss {
	dependsOn concatCss
	source = file("${buildDir}/web/debug/css/${rootProject.name}.css")
	dest = "${buildDir}/web/css/${project.name}.css"
	closure { warningLevel = 'QUIET' }
	doLast {
		ant.replaceregexp(match: '(calc\\([\\d|\\.]+[^+]*)(\\+)', replace:'\1 \2 ', flags:'g') {
			file "${buildDir}/web/css/${rootProject.name}.css"
		}
	}
}

/* Concat JavaScript-files, JavaScript-sources order is specified in src/main/js/.buildorder */
task concatJs {
	if (project.hasProperty('z8Home'))
		dependsOn gradle.includedBuild(file(z8Home).name).task(':org.zenframework.z8.js:assembleZip')
	doLast {
		def source = zipTree(configurations.revolt.singleFile).matching {
			include "web/debug/revolt.js"
		}.plus(file("${projectDir}/src/main/js/.buildorder").readLines().findAll { !it.trim().isEmpty() }
				.collect { file("${projectDir}/src/main/js/${it.trim()}") })
		def dest = file("${buildDir}/web/debug/${rootProject.name}.js")
		dest.parentFile.mkdirs()
		dest.newWriter('UTF-8').withWriter { w ->
			source.each { f -> w << f.getText('UTF-8') << '\n' }
		}
	}
}

/* Minify JavaScript */
minifyJs {
	dependsOn concatJs
	source = file("${buildDir}/web/debug/${rootProject.name}.js")
	dest = file("${buildDir}/web/${project.name}.js")
	closure {
		warningLevel = 'QUIET'
		compilerOptions = [
			languageIn: 'ECMASCRIPT6',
			languageOut: 'ECMASCRIPT5',
			rewritePolyfills: false
		]
	}
}

/* Copy static resources to build folder */
task prepareResources(type: Copy, group: 'Build') {
	if (project.hasProperty('z8Home'))
		dependsOn gradle.includedBuild(file(z8Home).name).task(':org.zenframework.z8.resources:assembleRz')
	from (zipTree(configurations.resources.singleFile)) {
		include 'bin/**/*'
		include 'web/css/**'
		include 'web/WEB-INF/fonts/**'
		include 'web/WEB-INF/reports/**'
		include 'web/WEB-INF/resources/**'
		filesMatching('bin/*.sh') {
			expand project: project
		}
	}
	into buildDir
}

/* Copy web resources to webapp folder */
task prepareWeb(type: Copy, group: 'Build') {
	from('src/main') {
		include 'web/**/*'
		filesMatching(['web/**/*.html', 'web/WEB-INF/project.xml']) {
			expand project: rootProject
		}
	}
	into buildDir
}

/* Prepare non-minified CSS & JS for debugging */
task prepareDebug(type: Copy) {
	dependsOn prepareWeb

	from ("${buildDir}/web") {
		include 'css/fonts/**'
	}
	from('src/main/web') {
		exclude 'WEB-INF/**'
		exclude 'debug.html'
	}
	into "${buildDir}/web/debug"
}

/* Assemble all web resources */
task assembleWeb(group: 'Build', dependsOn: [ minifyCss, minifyJs, prepareResources, prepareWeb, prepareDebug ])

// Application config

application {
	mainClassName = 'org.zenframework.z8.server.engine.ServerMain'
}

ext.appJavaXmx = '2048M'
ext.appHost = java.net.InetAddress.getLocalHost().getHostAddress()
ext.appPort = 9080
ext.appMaxFormContentSize = 15000000

run {
	dependsOn assembleWeb
	jvmArgs = [
		"-Xmx${appJavaXmx}",
		"-Xbootclasspath/p:${configurations.boot.singleFile.toPath()}",
		"-Dorg.eclipse.jetty.server.Request.maxFormContentSize=${appMaxFormContentSize}",
		"-Dorg.mortbay.http.HttpRequest.maxFormContentSize=${appMaxFormContentSize}",
		"-Djava.rmi.server.hostname=${appHost}",
	]
	args = ['-server', 'webserver']
	workingDir = "${buildDir}/web/WEB-INF"
}

// WAR config

//war {
//	dependsOn assembleWeb
//	exclude('debug.html')
//	from("${buildDir}/web") {
//		include '**/*.css'
//		include '**/*.js'
//	}
//	filesMatching('**/*.html') {
//		expand project: project
//	}
//
//	// TODO Exclude WEB-INF/lib/*.pom files
//	//exclude('**/*.pom')
//}

// Distribution config

distributions {
	main {
		contents {
			from(buildDir) {
				include 'web/**'
				include 'bin/**'
				exclude 'web/debug/**'
				exclude 'web/WEB-INF/**'
			}
			from("${projectDir}/src/main") {
				include 'bin/**'
				exclude 'bin/*.sh'
			}
			from("${projectDir}/src/main") {
				include 'bin/*.sh'
				include 'conf/**'
				expand project: project
			}
			into ('work') {
				from ("${buildDir}/web/WEB-INF") {
					exclude '*.cache'
					exclude 'storage/**/*'
					exclude 'reports/generated/**/*'
				}
			}
		}
	}
}

distZip.dependsOn assembleWeb
distTar.dependsOn assembleWeb
